/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Scripts/pages-2/perspectives.js":
/*!*****************************************!*\
  !*** ./Scripts/pages-2/perspectives.js ***!
  \*****************************************/
/***/ (() => {

eval("const initializePerspectivesComponents = () => {\r\n  // Add Modal For Perspective\r\n  new Modal(\"#perspectiveModal\");\r\n\r\n  // Add Modal For Objetives\r\n  new Modal(\"#objetiveModal\");\r\n\r\n  // Add Modal For Indicators\r\n  new Modal(\"#indicatorModal\");\r\n\r\n  // Modal to create new objectives\r\n  window.openObjectiveModal = function (dispatcher) {\r\n    const title = document.getElementById(\"modalTitle\");\r\n    const inputId = document.getElementById(\"perspectiveId\");\r\n    const perspectiveId = dispatcher.getAttribute(\"data-id\");\r\n    const perspectiveName = dispatcher.getAttribute(\"data-name\");\r\n\r\n    title.textContent = \"Crear Objetivo - \" + perspectiveName;\r\n    inputId.value = perspectiveId;\r\n  };\r\n\r\n  // Modal to create new indicators\r\n  window.openIndicatorModal = function (dispatcher) {\r\n    const title = document.getElementById(\"modalTitleIndicator\");\r\n    const inputId = document.getElementById(\"objectiveId\");\r\n    const objectiveId = dispatcher.getAttribute(\"data-id\");\r\n    const objectiveName = dispatcher.getAttribute(\"data-name\");\r\n\r\n    title.textContent = \"Crear Indicador - \" + objectiveName;\r\n    inputId.value = objectiveId;\r\n  };\r\n\r\n  // Table Collapse\r\n  window.tableCollapse = new Accordion(\r\n    document.querySelector(\"#table-collapse\"),\r\n    {\r\n      onlyChildNodes: true,\r\n      duration: 200,\r\n      showMultiple: true,\r\n    }\r\n  );\r\n\r\n  // Table for Objetives\r\n  document\r\n    .querySelectorAll(\"[id^='table-collapse-objetive-']\")\r\n    .forEach((table) => {\r\n      new Accordion(table, {\r\n        onlyChildNodes: false,\r\n        duration: 200,\r\n        showMultiple: true,\r\n        elementClass: \"ac-objetive\",\r\n        triggerClass: \"ac-trigger-objetive\",\r\n        activeClass: \"is-active-objetive\",\r\n      });\r\n    });\r\n\r\n  // Watchlist 3 Chart\r\n  const watchlist3Config = {\r\n    colors: [\"#3AC5BC\"],\r\n    chart: {\r\n      height: 30,\r\n      width: 60,\r\n      type: \"line\",\r\n      parentHeightOffset: 0,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n    },\r\n    series: [\r\n      {\r\n        name: \"Stat\",\r\n        data: [654, 820, 102, 540, 154, 614],\r\n      },\r\n    ],\r\n\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    stroke: {\r\n      curve: \"smooth\",\r\n      width: 3,\r\n    },\r\n\r\n    grid: {\r\n      padding: {\r\n        left: 0,\r\n        right: 0,\r\n        top: -28,\r\n        bottom: 0,\r\n      },\r\n    },\r\n    xaxis: {\r\n      show: false,\r\n      axisBorder: {\r\n        show: false,\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      labels: {\r\n        show: false,\r\n      },\r\n    },\r\n    yaxis: {\r\n      show: false,\r\n      axisBorder: {\r\n        show: false,\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      labels: {\r\n        show: false,\r\n      },\r\n    },\r\n  };\r\n  const watchlist2El = document.querySelector(\"#watchlist-2-chart\");\r\n\r\n  setTimeout(() => {\r\n    watchlist2El._chart = new ApexCharts(watchlist2El, watchlist3Config);\r\n    watchlist2El._chart.render();\r\n  });\r\n};\r\n\r\n/**\r\n * Inicializa los poppers para los dropdowns observando cambios en el DOM y en la carga inicial.\r\n *\r\n * Esta función configura y supervisa los elementos especificados dentro de contenedores\r\n * designados, inicializando poppers para los elementos dropdown que se encuentran\r\n * en referencias específicas. Utiliza la biblioteca Popper.js para gestionar\r\n * la colocación y el comportamiento visual de los dropdowns asociados.\r\n *\r\n * El parámetro `wrapper` define el prefijo del ID esperado para los wrappers de los dropdowns,\r\n * permitiendo una inicialización flexible en diferentes secciones de la página.\r\n *\r\n * El parámetro `watcher` especifica el ID del contenedor cuyos cambios en la estructura del DOM\r\n * serán observados para reconfigurar o aplicar los poppers a nuevos dropdowns agregados dinámicamente.\r\n *\r\n * @function initializeDropdownPoppers\r\n * @param {string} [wrapper=\"dropdown-wrapper-\"] - Prefijo del ID de los contenedores de los dropdowns a inicializar.\r\n * @param {string} [watcher=\"table-collapse\"] - ID del elemento contenedor donde se observarán los cambios del DOM.\r\n */\r\nconst initializeDropdownPoppers = (\r\n  wrapper = \"dropdown-wrapper-\",\r\n  watcher = \"table-collapse\"\r\n) => {\r\n  const initPoppers = () => {\r\n    document.querySelectorAll(\".popper-ref\").forEach((button) => {\r\n      if (!button.dataset.popperInitialized) {\r\n        const dropdownId = button.closest(`[id^=\"${wrapper}\"]`).id;\r\n        const popperConfig = {\r\n          placement: \"bottom-start\",\r\n          modifiers: [\r\n            {\r\n              name: \"offset\",\r\n              options: {\r\n                offset: [0, 4],\r\n              },\r\n            },\r\n          ],\r\n        };\r\n\r\n        new Popper(\r\n          `#${dropdownId}`,\r\n          \".popper-ref\",\r\n          \".popper-root\",\r\n          popperConfig\r\n        );\r\n\r\n        button.dataset.popperInitialized = \"true\";\r\n      }\r\n    });\r\n  };\r\n\r\n  const observer = new MutationObserver((mutations) => {\r\n    mutations.forEach((mutation) => {\r\n      if (mutation.type == \"childList\") {\r\n        initPoppers();\r\n      }\r\n    });\r\n  });\r\n\r\n  const configObserver = { childList: true, subtree: true };\r\n  const targetNode = document.getElementById(watcher);\r\n  observer.observe(targetNode, configObserver);\r\n\r\n  initPoppers();\r\n};\r\n\r\nwindow.addEventListener(\"app:mounted\", initializePerspectivesComponents, {\r\n  once: true,\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  initializeDropdownPoppers();\r\n  initializeDropdownPoppers(\r\n    \"dropdown-wrapper-objetive-\",\r\n    \"table-collapse-objetive\"\r\n  );\r\n  initializeDropdownPoppers(\r\n    \"dropdown-wrapper-indicator-\",\r\n    \"table-collapse-indicator\"\r\n  );\r\n});\r\n\n\n//# sourceURL=webpack://cmisentinelprime/./Scripts/pages-2/perspectives.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./Scripts/pages-2/perspectives.js"]();
/******/ 	
/******/ })()
;