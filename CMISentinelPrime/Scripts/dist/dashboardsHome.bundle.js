/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./Scripts/pages-2/dashboards-home.js":
/*!********************************************!*\
  !*** ./Scripts/pages-2/dashboards-home.js ***!
  \********************************************/
/***/ (() => {

eval("const initializeDashboardComponents = async () => {\r\n  async function loadTopStates() {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/bsc-dashboard/trends/states\"\r\n      );\r\n      const data = await response.json();\r\n      const container = document.getElementById(\"top-states-ranking\");\r\n      const counter = document.getElementById(\"top-states-counter\");\r\n\r\n      // Inicializar una variable para construir el HTML\r\n      let htmlContent = \"\";\r\n\r\n      counter.innerHTML = data.length;\r\n      // Iterar sobre los datos recibidos y construir el HTML para cada estado\r\n      data.forEach((state) => {\r\n        let trendIcon = \"\";\r\n\r\n        if (state.Trend === \"up\") {\r\n          trendIcon = `\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 11l5-5m0 0l5 5m-5-5v12\" />\r\n          </svg>\r\n        `;\r\n        }\r\n\r\n        if (state.Trend === \"down\") {\r\n          trendIcon = `\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-error\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\r\n          </svg>\r\n        `;\r\n        }\r\n\r\n        if (state.Trend === \"no change\") {\r\n          trendIcon = `\r\n            <svg style=\"transform: rotate(270deg)\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\r\n            </svg>\r\n          `;\r\n        }\r\n\r\n        htmlContent += `\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center space-x-2\">\r\n              <p>${state.EstadoEnvio}</p>\r\n            </div>\r\n            <div class=\"flex items-center space-x-2\">\r\n              <p class=\"text-sm text-slate-800 dark:text-navy-100\">${state.TotalEnvios}</p>\r\n              ${trendIcon}\r\n            </div>\r\n          </div>`;\r\n      });\r\n\r\n      // Asignar el HTML construido al contenedor\r\n      container.innerHTML = htmlContent;\r\n    } catch (error) {\r\n      console.error(\"Error loading top states\", error);\r\n    }\r\n  }\r\n\r\n  async function loadTopClients() {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/bsc-dashboard/trends/clients\"\r\n      );\r\n      const data = await response.json();\r\n      const container = document.getElementById(\"top-clients-ranking\");\r\n      const counter = document.getElementById(\"top-clients-counter\");\r\n\r\n      // Inicializar una variable para construir el HTML\r\n      let htmlContent = \"\";\r\n\r\n      counter.innerHTML = data.length;\r\n      // Iterar sobre los datos recibidos y construir el HTML para cada estado\r\n      data.forEach((state) => {\r\n        let trendIcon = \"\";\r\n\r\n        if (state.Trend === \"up\") {\r\n          trendIcon = `\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-success\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 11l5-5m0 0l5 5m-5-5v12\" />\r\n            </svg>\r\n          `;\r\n        }\r\n\r\n        if (state.Trend === \"down\") {\r\n          trendIcon = `\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-error\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\r\n            </svg>\r\n          `;\r\n        }\r\n\r\n        if (state.Trend === \"no change\") {\r\n          trendIcon = `\r\n            <svg style=\"transform: rotate(270deg)\" xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-slate-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 13l-5 5m0 0l-5-5m5 5V6\" />\r\n            </svg>\r\n          `;\r\n        }\r\n\r\n        htmlContent += `\r\n          <div class=\"flex items-center justify-between\">\r\n            <div class=\"flex items-center space-x-2\">\r\n              <p>${state.ClienteNombre}</p>\r\n            </div>\r\n            <div class=\"flex items-center space-x-2\">\r\n              <p class=\"text-sm text-slate-800 dark:text-navy-100\">${state.TotalPedidos}</p>\r\n              ${trendIcon}\r\n            </div>\r\n          </div>`;\r\n      });\r\n\r\n      // Asignar el HTML construido al contenedor\r\n      container.innerHTML = htmlContent;\r\n    } catch (error) {\r\n      console.error(\"Error loading top clients\", error);\r\n    }\r\n  }\r\n\r\n  async function loadLatestOrdersTable() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/eda/tail\");\r\n\r\n      const data = await response.json();\r\n\r\n      const tableBody = document.querySelector(\"#latest-orders-table tbody\");\r\n\r\n      tableBody.innerHTML = \"\";\r\n\r\n      data.forEach((item, index) => {\r\n        let shippingMethodClass = \"\";\r\n        let paymentMethodClass = \"\";\r\n\r\n        if (item.MetodoEnvio === \"envio economico\") {\r\n          shippingMethodClass =\r\n            \"badge bg-warning/10 text-warning dark:bg-warning/15\";\r\n        }\r\n\r\n        if (item.MetodoEnvio === \"envio expreso\") {\r\n          shippingMethodClass = \"badge bg-info/10 text-info dark:bg-info/15\";\r\n        }\r\n\r\n        if (item.MetodoEnvio === \"envio estandar\") {\r\n          shippingMethodClass =\r\n            \"badge bg-success/10 text-success dark:bg-success/15\";\r\n        }\r\n\r\n        if (item.MetodoPago === \"Efectivo\") {\r\n          paymentMethodClass = \"badge space-x-2.5 text-xs+ text-success\";\r\n        }\r\n\r\n        if (item.MetodoPago === \"Transferencia bancaria\") {\r\n          paymentMethodClass = \"badge space-x-2.5 text-xs+ text-info\";\r\n        }\r\n\r\n        if (item.MetodoPago === \"Tarjeta de cr√©dito\") {\r\n          paymentMethodClass = \"badge space-x-2.5 text-xs+ text-warning\";\r\n        }\r\n\r\n        const rowHtml = `\r\n                <tr class=\"border-y border-transparent border-b-slate-200 dark:border-b-navy-500\">\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">\r\n                      <p class=\"font-medium text-primary dark:text-accent-light\">\r\n                        #${index + 1}\r\n                      </p>\r\n                    </td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">\r\n                      <span class=\"font-medium text-slate-700 dark:text-navy-100\">\r\n                        ${item.FullName}\r\n                      </span>\r\n                    </td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">${\r\n                      item.EmpresaEnvio\r\n                    }</td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">\r\n                      <div class=\"${shippingMethodClass}\">\r\n                        ${item.MetodoEnvio}\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">${\r\n                      item.Producto\r\n                    }</td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">${\r\n                      item.Cantidad\r\n                    }</td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">\r\n                      <div class=\"${paymentMethodClass}\">\r\n                        <div class=\"w-2 h-2 rounded-full bg-current\"></div>\r\n                        <span>${item.MetodoPago}</span>\r\n                      </div>\r\n                    </td>\r\n                    <td class=\"whitespace-nowrap px-4 py-3 sm:px-5\">\r\n                      <p class=\"text-sm+ font-medium text-slate-700 dark:text-navy-100\">\r\n                        $${item.CostoFinal.toFixed(2)}\r\n                      </p>\r\n                    </td>\r\n                </tr>\r\n            `;\r\n        tableBody.innerHTML += rowHtml;\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error loading the latest orders\", error);\r\n    }\r\n  }\r\n\r\n  loadTopClients();\r\n  loadTopStates();\r\n  loadLatestOrdersTable();\r\n};\r\n\r\nwindow.addEventListener(\"app:mounted\", initializeDashboardComponents, {\r\n  once: true,\r\n});\r\n\r\nconst loadCounters = async (tab = \"monthly\") => {\r\n  try {\r\n    const response = await fetch(\r\n      `http://localhost:8000/bsc-dashboard/counters?tab=${tab}`\r\n    );\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n\r\n    for (const [key, value] of Object.entries(data)) {\r\n      const stateClass = `status-${key.toLowerCase().replace(/\\s+/g, \"-\")}`;\r\n      const element = document.querySelector(`.${stateClass}`);\r\n      if (element) {\r\n        element.textContent = value;\r\n      } else {\r\n        console.log(`No element found for ${stateClass}`);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error loading counter\", error);\r\n  }\r\n};\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  async function loadShippingCostHistogram() {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/eda/histograma-costo-envio\"\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n      const data = await response.json();\r\n\r\n      window.Highcharts.chart(\"overview-histogram-chart\", {\r\n        chart: {\r\n          type: \"histogram\",\r\n          zoomType: \"xy\",\r\n        },\r\n        title: {\r\n          text: \"Histograma de Costo de Env√≠o\",\r\n          align: \"left\",\r\n          style: {\r\n            fontSize: \"14px\",\r\n          },\r\n        },\r\n        credits: {\r\n          enabled: false,\r\n        },\r\n        xAxis: [\r\n          { title: { text: \"Costo de Env√≠o\" }, alignTicks: false },\r\n          { title: { text: \"Histograma\" }, alignTicks: false, opposite: true },\r\n        ],\r\n        yAxis: [\r\n          { title: { text: \"Frecuencia\" } },\r\n          { title: { text: \"Histograma\" }, opposite: true },\r\n        ],\r\n        plotOptions: {\r\n          histogram: {\r\n            accessibility: {\r\n              point: {\r\n                valueDescriptionFormat:\r\n                  \"{index}. {point.x:.3f} to {point.x2:.3f}, {point.y}.\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Histograma\",\r\n            type: \"histogram\",\r\n            xAxis: 1,\r\n            yAxis: 1,\r\n            baseSeries: \"s1\",\r\n            zIndex: -1,\r\n          },\r\n          {\r\n            name: \"Datos\",\r\n            type: \"scatter\",\r\n            data: data,\r\n            id: \"s1\",\r\n            marker: { radius: 1.5 },\r\n          },\r\n        ],\r\n      });\r\n\r\n      console.log(data);\r\n    } catch (error) {\r\n      console.error(\r\n        \"Error loading histogram for shipping cost:\",\r\n        error.message\r\n      );\r\n    }\r\n  }\r\n\r\n  async function loadUsersTail() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/eda/head\");\r\n\r\n      const data = await response.json();\r\n\r\n      console.log({ dataTail: data });\r\n    } catch (error) {\r\n      console.error(\"Error loading users tail\", error);\r\n    }\r\n  }\r\n\r\n  async function loadFinalCostScatter() {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8000/eda/scatter-costo-final\"\r\n      );\r\n      const data = await response.json();\r\n\r\n      Highcharts.chart(\"final-cost-chart\", {\r\n        chart: {\r\n          type: \"scatter\",\r\n          zoomType: \"xy\",\r\n        },\r\n        title: {\r\n          text: \"Dispersi√≥n del Costo Final por Variables\",\r\n        },\r\n        subtitle: {\r\n          text: \"Exploraci√≥n de la relaci√≥n entre diferentes variables y costo final\",\r\n        },\r\n        xAxis: {\r\n          title: {\r\n            text: \"Variable X\",\r\n          },\r\n          startOnTick: true,\r\n          endOnTick: true,\r\n          showLastLabel: true,\r\n        },\r\n        yAxis: {\r\n          title: {\r\n            text: \"Costo Final\",\r\n          },\r\n          labels: {\r\n            format: \"{value} $\",\r\n          },\r\n        },\r\n        legend: {\r\n          enabled: false, // Ocultar la leyenda si solo hay una serie\r\n        },\r\n        plotOptions: {\r\n          scatter: {\r\n            marker: {\r\n              radius: 5,\r\n              states: {\r\n                hover: {\r\n                  enabled: true,\r\n                  lineColor: \"rgb(100,100,100)\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n        tooltip: {\r\n          headerFormat: \"<b>{series.name}</b><br>\",\r\n          pointFormat: \"√çndice: {point.x}, Costo: {point.y} $\",\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Costo Final\",\r\n            color: \"rgba(119, 152, 191, 0.5)\", // Un color espec√≠fico para la serie\r\n            data: data,\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error loading final cost scatter data\", error);\r\n    }\r\n  }\r\n\r\n  async function loadBoxPlot() {\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/eda/box-plot\");\r\n      const data = await response.json();\r\n\r\n      Highcharts.chart(\"box-plot-chart\", {\r\n        chart: {\r\n          type: \"boxplot\",\r\n          zoomType: \"xy\",\r\n        },\r\n        title: {\r\n          text: \"\",\r\n        },\r\n        legend: {\r\n          enabled: false,\r\n        },\r\n        credits: {\r\n          enabled: false,\r\n        },\r\n        xAxis: {\r\n          categories: [\r\n            \"Costo Final\",\r\n            \"Descuento\",\r\n            \"Cantidad\",\r\n            \"Costo de Env√≠o\",\r\n            \"Precio Unitario\",\r\n          ],\r\n          title: {\r\n            text: \"Categor√≠as\",\r\n          },\r\n        },\r\n\r\n        yAxis: {\r\n          title: {\r\n            text: \"Valores\",\r\n          },\r\n          plotLines: [\r\n            {\r\n              value: 932,\r\n              color: \"red\",\r\n              width: 1,\r\n              label: {\r\n                text: \"Mean: 932\",\r\n                align: \"center\",\r\n                style: {\r\n                  color: \"gray\",\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        },\r\n\r\n        series: [\r\n          {\r\n            name: \"Observaciones\",\r\n            data: [\r\n              data.CostoFinal.boxplot,\r\n              data.Descuento.boxplot,\r\n              data.Cantidad.boxplot,\r\n              data.CostoEnvio.boxplot,\r\n              data.PrecioUnitario.boxplot,\r\n            ],\r\n            tooltip: {\r\n              headerFormat: \"<em>Categor√≠a {point.key}</em><br/>\",\r\n            },\r\n          },\r\n          {\r\n            name: \"Outliers\",\r\n            color: Highcharts.getOptions().colors[0],\r\n            type: \"scatter\",\r\n            data: [\r\n              ...data.CostoFinal.outliers,\r\n              ...data.Descuento.outliers,\r\n              ...data.Cantidad.outliers,\r\n              ...data.CostoEnvio.outliers,\r\n              ...data.PrecioUnitario.outliers,\r\n            ],\r\n            marker: {\r\n              fillColor: \"white\",\r\n              lineWidth: 1,\r\n              lineColor: Highcharts.getOptions().colors[0],\r\n            },\r\n            tooltip: {\r\n              pointFormat: \"Observation: {point.y}\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error loading box plot data\", error);\r\n    }\r\n  }\r\n\r\n  loadShippingCostHistogram();\r\n  loadUsersTail();\r\n  loadFinalCostScatter();\r\n  loadBoxPlot();\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", async function () {\r\n  window.loadCounters = loadCounters;\r\n  await loadCounters();\r\n});\r\n\n\n//# sourceURL=webpack://cmisentinelprime/./Scripts/pages-2/dashboards-home.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./Scripts/pages-2/dashboards-home.js"]();
/******/ 	
/******/ })()
;